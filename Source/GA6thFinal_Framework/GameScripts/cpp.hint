// 힌트 파일은 Visual Studio IDE에서 함수 및 매크로 이름과 같은 Visual C++ 식별자를
// 해석하는 데 도움이 됩니다.
// 자세한 내용은 다음을 참조하세요. https://go.microsoft.com/fwlink/?linkid=865984

#define REFLECT_FIELDS_BEGIN(BASE)                                             \
    using Base = BASE;                                                         \
    struct reflect_fields_struct                                               \
    {                                                                          \
        rfl::Flatten<Base::reflect_fields_struct> Basefields{};

#define REFLECT_FIELDS_END(CLASS)                                              \
    };                                                                         \
    struct reflection_safe_ptr                                                 \
    {                                                                          \
        reflection_safe_ptr(CLASS##* owner)                                    \
        {                                                                      \
            _owner = owner;                                                    \
        }                                                                      \
        ~reflection_safe_ptr() = default;                                      \
        reflect_fields_struct* operator->()                                    \
        {                                                                      \
            return Get();                                                      \
        }                                                                      \
        reflect_fields_struct& operator*()                                     \
        {                                                                      \
            return *Get();                                                     \
        }                                                                      \
        const reflect_fields_struct* operator->() const                        \
        {                                                                      \
            return Get();                                                      \
        }                                                                      \
        const reflect_fields_struct& operator*() const                         \
        {                                                                      \
            return *Get();                                                     \
        }                                                                      \
        reflect_fields_struct* Get()                                           \
        {                                                                      \
            if (_reflection == nullptr)                                        \
            {                                                                  \
                _reflection = reinterpret_cast<CLASS## ::reflect_fields_struct*>(_owner->get_reflect_fields()); \
            }                                                                  \
            return _reflection;                                                \
        }                                                                      \
        const reflect_fields_struct* Get() const                               \
        {                                                                      \
            if (_reflection == nullptr)                                        \
            {                                                                  \
                _reflection = reinterpret_cast<CLASS## ::reflect_fields_struct*>(_owner->get_reflect_fields()); \
            }                                                                  \
            return _reflection;                                                \
        }                                                                      \
                                                                               \
    private:                                                                   \
        mutable CLASS## ::reflect_fields_struct* _reflection = nullptr;        \
        CLASS##*                         _owner      = nullptr;                \
    };                                                                         \
    reflection_safe_ptr ReflectFields{this};                                   \
                                                                               \
public:                                                                        \
    virtual std::string SerializedReflectFields()                              \
    {                                                                          \
        serialized_reflect_event_recursive();                                  \
        return ReflectHelper::json::SerializedObjet(*ReflectFields);           \
    }                                                                          \
    virtual bool DeserializedReflectFields(std::string_view data)              \
    {                                                                          \
        bool result =                                                          \
            ReflectHelper::json::DeserializedObjet(*ReflectFields, data);      \
        deserialized_reflect_event_recursive();                                \
        return result;                                                         \
    }                                                                          \
                                                                               \
protected:                                                                     \
    virtual void make_reflect_fields(void*& fields, unsigned long long& size)  \
    {                                                                          \
        size_t size_of = sizeof(CLASS## ::reflect_fields_struct);              \
        fields         = malloc(size_of);                                      \
        size           = size_of;                                              \
        new (fields) CLASS## ::reflect_fields_struct();                        \
    }                                                                          \
    virtual void serialized_reflect_event_recursive()                          \
    {                                                                          \
        Base::serialized_reflect_event_recursive();                            \
        if constexpr (std::is_same_v<                                          \
                          decltype(Base::SerializedReflectEvent),              \
                          decltype(CLASS## ::SerializedReflectEvent)> ==       \
                      false)                                                   \
        {                                                                      \
            CLASS## ::SerializedReflectEvent();                                \
        }                                                                      \
    }                                                                          \
    virtual void deserialized_reflect_event_recursive()                        \
    {                                                                          \
        Base::deserialized_reflect_event_recursive();                          \
        if constexpr (std::is_same_v<                                          \
                          decltype(Base::DeserializedReflectEvent),            \
                          decltype(CLASS## ::DeserializedReflectEvent)> ==     \
                      false)                                                   \
        {                                                                      \
            CLASS## ::DeserializedReflectEvent();                              \
        }                                                                      \
    }

#define REFLECT_PROPERTY(...) 

#define USING_PROPERTY(class_name)                 
     
#define GETTER(type, property_name)                                                            \
struct property_name##_property_getter_struct                                                  \
{                                                                                              \
    using Type = type;                                                                         \
    static constexpr const char* name = #property_name;                                        \
    inline type operator()(property_class_type* _this) const                                   \
    {                                                                                          \
        return _this->property_name##_property_getter();                                       \
    }                                                                                          \
};                                                                                             \
type property_name##_property_getter()                                         
                                                                                               
#define SETTER(type, property_name)                                                            \
struct property_name##_property_setter_struct                                                  \
{                                                                                              \
    using Type = type;                                                                         \
    static constexpr const char* name = #property_name;                                        \
    inline void operator()(property_class_type* _this, const std::remove_cvref_t<type>& value) \
    {                                                                                          \
        _this->property_name##_property_setter(value);                                         \
    }                                                                                          \
};                                                                                             \
void property_name##_property_setter(const std::remove_cvref_t<type>& value)
  
#define GETTER_ONLY(type, property_name)                                                       \
using property_name##_property_setter_struct = property_void_type;                             \
GETTER(type, property_name)               

#define SETTER_ONLY(type, property_name)                                                       \
using property_name##_property_getter_struct = property_void_type;                             \
SETTER(type, property_name)   

#define PROPERTY(property_name)                                                                \
TProperty<property_class_type, property_name##_property_getter_struct, property_name##_property_setter_struct> property_name{this};                \
using property_name##_property_t = TProperty<property_class_type, property_name##_property_getter_struct, property_name##_property_setter_struct>;            

